name: Check README on push

on: [push, pull_request]

jobs:
  readme-tree-writer:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - uses: actions/checkout@v3
      
      # Install tree if not already installed
      - name: Install tree
        run: sudo apt-get update && sudo apt-get install -y tree
      
      # Create the tree script that respects readmetreerc.yml
      - name: Create tree script
        run: |
          cat > update-readme-tree.sh <<'EOF'
          #!/bin/bash
          
          # Read configuration from readmetreerc.yml
          if [ -f readmetreerc.yml ]; then
            file_names=$(grep -A5 "fileNames:" readmetreerc.yml | grep -v "fileNames:" | sed 's/^[ \t]*-[ \t]*//' | tr -d ' ')
            chapter=$(grep "chapter:" readmetreerc.yml | cut -d':' -f2 | tr -d ' ')
            include_dirs=$(grep -A5 "include:" readmetreerc.yml | grep -v "include:" | sed 's/^[ \t]*-[ \t]*//' | tr -d ' ' | tr '\n' ' ')
          else
            file_names="README.md"
            chapter="Tree"
            include_dirs="."
          fi
          
          # Default to README.md if no file names specified
          if [ -z "$file_names" ]; then
            file_names="README.md"
          fi
          
          # Default to "Tree" if no chapter specified
          if [ -z "$chapter" ]; then
            chapter="Tree"
          fi
          
          # Default to "." if no include directories specified
          if [ -z "$include_dirs" ]; then
            include_dirs="."
          fi
          
          for file_name in $file_names; do
            if [ ! -f "$file_name" ]; then
              echo "File $file_name not found, skipping."
              continue
            fi
            
            # Generate the tree structure in the correct format
            tree_output=".\n"
            for dir in $include_dirs; do
              if [ -d "$dir" ]; then
                # Use tree command with specific formatting options
                dir_tree=$(tree -tf --noreport -I '*~|.git|node_modules|.github' --charset ascii "$dir" | 
                          tail -n +2 | # Skip the first line which is the directory name
                          sed -e 's/│   / /g' -e 's/├── / * /g' -e 's/└── / * /g' -e 's/    / /g' |
                          sed -e 's:\([^ ]*\)$:[\1](\1):g' | # Convert filenames to markdown links
                          sed -e 's: \[\./\([^]]*\)\](\./\1): [\1](./\1):g' # Clean up the links
                         )
                tree_output="${tree_output}${dir_tree}\n"
              fi
            done
            
            # Format the tree output
            formatted_tree="\`\`\`\n${tree_output}\`\`\`"
            
            # Update the file with the new tree structure
            if grep -q "^## ${chapter}" "$file_name"; then
              # Find the line number of the Tree section
              start_line=$(grep -n "^## ${chapter}" "$file_name" | cut -d':' -f1)
              
              # Find the line number of the next section or EOF
              end_line=$(tail -n +$((start_line+1)) "$file_name" | grep -n "^##" | head -1 | cut -d':' -f1)
              if [ -z "$end_line" ]; then
                # If no next section, use the end of file
                end_line=$(wc -l < "$file_name")
              else
                # Adjust end_line to be relative to the whole file
                end_line=$((start_line + end_line))
              fi
              
              # Create a temporary file with content before the Tree section
              head -n $start_line "$file_name" > temp.md
              
              # Add the new tree structure
              echo -e "## ${chapter}\n${formatted_tree}" >> temp.md
              
              # Add content after the Tree section
              if [ $end_line -lt $(wc -l < "$file_name") ]; then
                tail -n +$end_line "$file_name" >> temp.md
              fi
              
              # Replace the original file
              mv temp.md "$file_name"
            else
              # If the section doesn't exist, add it at the end
              echo -e "\n## ${chapter}\n${formatted_tree}" >> "$file_name"
            fi
          done
          EOF
          
          chmod +x update-readme-tree.sh
      
      # Run the tree script
      - name: Update README with tree structure
        run: ./update-readme-tree.sh
      
      # Commit changes if any files were modified
      - name: Commit if diff exists
        run: |
          if [ "$(git diff --ignore-space-at-eol . | wc -l)" -gt "0" ]; then
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add .
            git commit -m "Update README tree structure"
            git push
          fi
